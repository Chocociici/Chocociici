Бизнес-процесс создания заказа (UML Activity Diagram):

Начало процесса:
Пользователь открывает мобильное приложение.

Выбор товаров:
Пользователь просматривает список доступных товаров.
Пользователь добавляет выбранные товары в корзину.

Оформление заказа:
Пользователь переходит в корзину.
Пользователь проверяет выбранные товары.
Пользователь подтверждает оформление заказа.

Передача данных на сервер:
Клиентское приложение отправляет запрос на сервер с информацией о заказе, включая:
Идентификатор пользователя.
Идентификаторы товаров.
Общую сумму заказа.

Обработка заказа на сервере:
Сервер проверяет данные:
Существование пользователя.
Наличие товаров.
Сервер создает запись о заказе в таблице "Покупки".

Ответ сервера:
Если заказ успешно создан, сервер возвращает подтверждение с идентификатором заказа.
Если произошла ошибка (например, товар отсутствует), сервер отправляет сообщение об ошибке.

Отображение результата:
Приложение показывает пользователю статус заказа (успех или ошибка).

Конец процесса.

 


Функция редактирования заказа

Текстовое описание

Функция редактирования заказа позволяет пользователю внести изменения в ранее созданный заказ. Пользователь может изменить список товаров, количество каждого товара, а также данные о доставке (если применимо). После подтверждения изменений данные отправляются на сервер, где выполняется их обработка и обновление в базе данных.

Шаги редактирования заказа:

Пользователь открывает экран редактирования заказа в приложении.

Приложение запрашивает у сервера текущие данные заказа.

Пользователь вносит изменения в состав заказа или другие параметры.

Приложение отправляет измененные данные на сервер.

Сервер проверяет данные, обновляет информацию о заказе в базе данных и возвращает подтверждение.

Приложение отображает результат пользователю (успех или ошибка).

Диаграмма последовательности (Sequence Diagram)

Участники:

Пользователь

Клиентское приложение

Сервер

База данных

Процесс:

Пользователь запрашивает экран редактирования заказа.

Приложение отправляет запрос на сервер для получения данных о заказе (GET /order/{id}).

Сервер возвращает текущие данные заказа.

Пользователь вносит изменения через интерфейс.

Приложение отправляет измененные данные на сервер (PUT /order/{id}).

Сервер проверяет корректность данных.

Сервер обновляет информацию в базе данных.

Сервер возвращает подтверждение успешного обновления.

Приложение отображает пользователю результат операции.

Описание API-методов

1. Получение данных заказа

Метод: GET

Endpoint: /order/{id}

Параметры:

id (path) — идентификатор заказа

Ответ:

{
"orderId": 123,
"userId": 456,
"items": [
{"productId": 1, "quantity": 2},
{"productId": 2, "quantity": 1}
],
"totalPrice": 30.5,
"status": "Pending"
}

2. Редактирование заказа

Метод: PUT

Endpoint: /order/{id}

Параметры:

id (path) — идентификатор заказа

Тело запроса:

{
"items": [
{"productId": 1, "quantity": 3},
{"productId": 3, "quantity": 2}
],
"totalPrice": 45.0
}

Ответ:

{
"success": true,
"message": "Order updated successfully."
}

3. Возможные ошибки:

400: Некорректный формат данных.

404: Заказ с указанным идентификатором не найден.

500: Внутренняя ошибка сервера.

Процесс хранения изменений в БД

Сервер получает запрос на редактирование заказа.

Проверяется наличие заказа в таблице Покупки.

Изменения записываются в таблицу Покупки с обновлением:

Состав заказа (внешние ключи на товары в таблице Товары).

Итоговая стоимость заказа.

Лог изменений сохраняется в отдельной таблице (например, История_изменений).

Сервер возвращает подтверждение об успешной операции.


1.	Вывести покупателей с количеством осуществленных покупок: SELECT Покупатели.Имя, Покупатели.Фамилия, COUNT(Покупки.Идентификатор) AS Количество_покупок FROM Покупатели LEFT JOIN Покупки ON Покупатели.Идентификатор = Покупки.Ключ_покупателя GROUP BY Покупатели.Имя, Покупатели.Фамилия;
2.	Общая стоимость товаров для каждого покупателя и сортировка результата в порядке убывания: SELECT Покупатели.Имя, Покупатели.Фамилия, SUM(Товары.Стоимость) AS Общая_стоимость FROM Покупатели JOIN Покупки ON Покупатели.Идентификатор = Покупки.Ключ_покупателя JOIN Товары ON Покупки.Ключ_товара = Товары.Идентификатор GROUP BY Покупатели.Имя, Покупатели.Фамилия ORDER BY Общая_стоимость DESC;
3.	 Получить покупателей, купивших только один товар: SELECT Покупатели.Имя, Покупатели.Фамилия FROM Покупатели JOIN Покупки ON Покупатели.Идентификатор = Покупки.Ключ_покупателя GROUP BY Покупатели.Идентификатор, Покупатели.Имя, Покупатели.Фамилия HAVING COUNT(Покупки.Ключ_товара) = 1;

  
вот ссылка на изображение 
https://ibb.co/FhwYhq3
